import { LoggerService } from '@nestjs/common';
import { LogStreamLevel } from './ez.logger.enum';
export declare class EzLogger implements LoggerService {
    private readonly appStreamLevel;
    private readonly context?;
    private readonly isTimestampEnabled;
    private static lastTimestamp?;
    private static instance?;
    private static prefix;
    private static appContext;
    constructor(appStreamLevel: LogStreamLevel, appContext: string, context?: string, isTimestampEnabled?: boolean);
    static info(message: any, context: string, isTimeDiffEnabled: boolean, traceId: string): void;
    static error(message: any, context: string, isTimeDiffEnabled: boolean, traceId: string): void;
    static warn(message: any, context: string, isTimeDiffEnabled: boolean, traceId: string): void;
    static debug(message: any, context: string, isTimeDiffEnabled: boolean, traceId: string): void;
    static fatal(message: any, context: string, isTimeDiffEnabled: boolean, traceId: string): void;
    static emergency(message: any, context: string, isTimeDiffEnabled: boolean, traceId: string): void;
    private static printMessage;
    error(message: any, traceId: string, profile: string, logStreamLevel: LogStreamLevel): void;
    info(message: any, traceId: string, profile: string, logStreamLevel: LogStreamLevel): void;
    warn(message: any, traceId: string, profile: string, logStreamLevel: LogStreamLevel): void;
    debug(message: any, traceId: string, profile: string, logStreamLevel: LogStreamLevel): void;
    fatal(message: any, traceId: string, profile: string, logStreamLevel: LogStreamLevel): void;
    emergency(message: any, traceId: string, profile: string, logStreamLevel: LogStreamLevel): void;
    log(message: any, traceId: string, profile: string, logStreamLevel: LogStreamLevel): void;
    private callFunction;
    private getInstance;
    private isLogLevelEnabled;
    private validStreamLevel;
}
